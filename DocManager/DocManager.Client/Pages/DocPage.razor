@page "/Document"

<h3 style="margin-bottom: 8px;">Создание документа</h3>

<MudButton StartIcon="@Icons.Material.Filled.Info" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())">Информация</MudButton>
<MudPaper Style="overflow:hidden; position:relative;">
     <MudDrawerContainer>
        <MudDrawer @bind-Open="_open" Elevation="2" Variant="@DrawerVariant.Persistent" Class="pa-2">
            <MudCard Class="mud-height-full">
                <MudCardContent>
                    <MudForm ReadOnly="!ReadOnly">
                        <MudTextField @bind-Value="@NameDoc" T="string" Label="Заголовок" />
                        <MudTextField @bind-Value="@AuthorDoc" ReadOnly="true" T="string" Label="Автор" />
                        <MudDatePicker @bind-Date="@CreatedDateDoc" ReadOnly="true" Label="Дата создания" />
                        <MudDatePicker @bind-Date="@ExpireDateDoc" IsDateDisabledFunc="@((DateTime dt)=>(dt < dateMinExpire))" Label="Действителен до" />
                        <MudTextField @bind-Value="@PathDoc" T="string" Label="Путь" />
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudSwitch @bind-Value="ReadOnly" Label="Режим изменения" Color="Color.Info" />
                </MudCardActions>
            </MudCard>
        </MudDrawer>
        <div class="d-flex justify-center align-center">
            <MudTextField ReadOnly="!ReadOnly" @ref="multilineReference" T="string" Label="Содержание документа" Lines="25"
                            Variant="Variant.Outlined" Text="@DescriptionDoc" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api"
                            OnAdornmentClick="@(() => multilineReference.SelectAsync())" />
        </div>
    </MudDrawerContainer>
</MudPaper>

@code {
    private bool _open = true;
    bool ReadOnly = false;

    private MudTextField<string> multilineReference;

    string? NameDoc { get; set; }
    string? AuthorDoc { get; set; }
    string? DescriptionDoc { get; set; }
    DateTime? CreatedDateDoc { get; set; } = DateTime.Today;
    DateTime? ExpireDateDoc { get; set; }
    string? PathDoc { get; set; } = "\\";

    private DateTime dateMinExpire = DateTime.Today.AddDays(1);

    public async Task Validate()
    {
        DocInfo docInfo = new DocInfo()
            {
                UserId = 7,
                Name = NameDoc,
                Author = AuthorDoc,
                Path = PathDoc,
                Description = DescriptionDoc,
                CreatedDate = DateTime.Today,
                ExpireDate = (DateTime)ExpireDateDoc,
            };
    }
    private void DrawerToggle()
    {
        _open = !_open;
    }

    string sampleText = "Hello World!";   
}
