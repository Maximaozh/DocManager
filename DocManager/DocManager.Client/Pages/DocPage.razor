@page "/Document/{DocId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject HttpClient httpClient
@inject NavigationManager NavManager
@inject AuthenticationStateProvider StateProvider

<h3 style="margin-bottom: 8px;">Создание документа</h3>

@attribute [Authorize(Roles ="Администратор")]

<MudButton StartIcon="@Icons.Material.Filled.Info" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())">Информация</MudButton>
<MudPaper Style="overflow:hidden; position:relative;">
    <MudDrawerContainer>
        <MudDrawer @bind-Open="_open" Elevation="2" Variant="@DrawerVariant.Persistent" Class="pa-2">
           
        @if (DocId > 0)
        {
            <MudCard Class="mud-height-full">
                <MudCardContent>
                         <MudForm ReadOnly="!ReadOnly">
                            <MudTextField @bind-Value="@DocId" T="int" Label="Id" />
                            <MudTextField @bind-Value="@NameDoc" T="string" Label="Заголовок" />
                            <MudTextField @bind-Value="@AuthorDoc" ReadOnly="true" T="string" Label="Автор" />
                            <MudDatePicker @bind-Date="@CreatedDateDoc" ReadOnly="true" Label="Дата создания" />
                            <MudDatePicker @bind-Date="@ExpireDateDoc" IsDateDisabledFunc="@((DateTime dt)=>(dt < dateMinExpire))" Label="Действителен до" />
                            <MudTextField @bind-Value="@PathDoc" T="string" Label="Путь" />
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" @onclick="Validate">Сохранить</MudButton>
                        </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudSwitch @bind-Value="ReadOnly" Label="Режим изменения" Color="Color.Info" />
                </MudCardActions>
            </MudCard>
        }
        else
        {
            <MudCard Class="mud-height-full">
                <MudCardContent>
                    <MudForm ReadOnly="ReadOnly">
                        <MudTextField @bind-Value="@NameDoc" T="string" Label="Заголовок" />
                        <MudTextField @bind-Value="@AuthorDoc" ReadOnly="true" T="string" Label="Автор" />
                        <MudDatePicker @bind-Date="@CreatedDateDoc" ReadOnly="true" Label="Дата создания" />
                        <MudDatePicker @bind-Date="@ExpireDateDoc" IsDateDisabledFunc="@((DateTime dt)=>(dt < dateMinExpire))" Label="Действителен до" />
                        <MudTextField @bind-Value="@PathDoc" T="string" Label="Путь" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" @onclick="Validate">Сохранить</MudButton>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        }
               
        </MudDrawer>
        <div class="d-flex justify-center align-center">
            <MudTextField @bind-Value="@DescriptionDoc" ReadOnly="!ReadOnly" @ref="multilineReference" T="string" Label="Содержание документа" Lines="25"
                          Variant="Variant.Outlined" Text="@DescriptionDoc" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api"
                          OnAdornmentClick="@(() => multilineReference.SelectAsync())" />
        </div>
    </MudDrawerContainer>

</MudPaper>
<MudText Class="mb-4">@result</MudText>

    @code {
    private bool _open = true;
    bool ReadOnly = false;
    string result = "---";

    [Parameter]
    public int DocId { get; set; } = 0;

    [Required]
    string? NameDoc { get; set; }
    string? AuthorDoc { get; set; }
    string? DescriptionDoc { get; set; }
    DateTime? CreatedDateDoc { get; set; } = DateTime.Today;
    [Required]
    DateTime? ExpireDateDoc { get; set; }
    [Required]
    string? PathDoc { get; set; } = "\\";

    private DateTime dateMinExpire;
    private MudTextField<string> multilineReference;

    UserInfo userInfo = new UserInfo() { Id = "---", Login = "---", Role = "---" };

    protected override async void OnInitialized()
    {
        var state = await StateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        //Поменять на получение с локалстораж
        if (user is not null && user.Identity.IsAuthenticated)
        {
            var claims = user.Claims;
            userInfo.Id = claims.FirstOrDefault(c => c.Type == "UserId")?.Value ?? "---";
            userInfo.Login = claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "---";
            userInfo.Role = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "---";
            userInfo.Name = claims.FirstOrDefault(c => c.Type == "Name")?.Value ?? "---";
            userInfo.Surname = claims.FirstOrDefault(c => c.Type == "Surname")?.Value ?? "---";
        }
        AuthorDoc = userInfo.Name + " " + userInfo.Surname;
    }

    public async Task Validate()
    {
        var ExpireDateDocUtc = DateTime.SpecifyKind((DateTime)ExpireDateDoc, DateTimeKind.Utc);

        DocInfo docInfo = new DocInfo()
            {
                UserId = Convert.ToInt32(userInfo.Id),
                Name = NameDoc,
                Path = PathDoc,
                Description = DescriptionDoc,
                CreatedDate = DateTime.UtcNow,
                ExpireDate = ExpireDateDocUtc,
            };
        var response = await httpClient.PostAsJsonAsync("api/Document", docInfo);
        if (response.IsSuccessStatusCode)
        {
            result = $"Документ {docInfo.Name} успешно создан!";
            NavManager.NavigateTo("DocWork", true);
        }
        else
        {
            result = "Ошибка. Документ не был добавлен в систему.";
        }
    }
    private void DrawerToggle()
    {
        _open = !_open;
    }
}

