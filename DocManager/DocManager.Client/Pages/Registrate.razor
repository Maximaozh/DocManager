@page "/Registrate"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient httpClient
@inject AuthenticationStateProvider StateProvider

@attribute [Authorize(Roles = "Администратор")]

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" @bind-Value="LoginReg" Label="Логин" Required="true" RequiredError="Вы не указали логин" />
                <MudTextField T="string" @bind-Value="PasswordReg" Label="Пароль" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Вы не указали пароль" />
                <MudSelect T="string" Label="Роль" @bind-Value="RoleReg" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Укажите роль пользователя">
                    <MudSelectItem Value="@("Пользователь")" />
                    <MudSelectItem Value="@("Администратор")" />
                </MudSelect>
                <MudTextField T="string" @bind-Value="NameReg"      Label="Имя" />
                <MudTextField T="string" @bind-Value="SurnameReg"   Label="Фамилия" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" @onclick="Validate">Регистрация</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Очистить поля</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Ошибки: ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    protected override async Task OnInitializedAsync()
        {
            var authState = await
                    StateProvider.GetAuthenticationStateAsync();
        }

    // Поля для формы
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string result = "---";

    // Поля для вода
    string? LoginReg        { get; set; }
    string? PasswordReg     { get; set; }
    string? RoleReg { get; set; } = "Пользователь";
    string? NameReg         { get; set; }
    string? SurnameReg      { get; set; }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Поле 'пароль' пусто";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Длина пароля должна быть больше 8ми символов";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "У пароля отсутствую буквы вверхнего регистра";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "У пароля отсутствую буквы нижнего регистра";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "В пароле не содержится ни одна цифра";
    }


    public async Task Validate()
    {


        UserRegistrate user = new UserRegistrate()
            {
                Login = LoginReg,
                Password = PasswordReg,
                Role = RoleReg,
                Name = NameReg,
                Surname = SurnameReg,
            };

        var response = await httpClient.PostAsJsonAsync("api/user/registrate", user);
        if (response.IsSuccessStatusCode)
        {
            result = $"Пользователь {user.Login} зарегистрирован!";
        } else
        {
            result = "Ошибка. Пользователь не был добавлен в систему. Возможно данный логин уже занят?" ;
        }
    }

}
