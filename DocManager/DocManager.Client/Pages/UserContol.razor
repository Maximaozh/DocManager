@page "/UserControl"
@using Shared.Dto.Group;

@inject HttpClient httpClient


<MudTextField @bind-Value="_textFinder"
              HelperText="@_textFinder" Label="Поиск" Variant="Variant.Outlined"
              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />


<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Пользователи">
        <MudTable Items="@users" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Логин</MudTh>
                <MudTh>Имя</MudTh>
                <MudTh>Фамилия</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Login">@context.Login</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Surname">@context.Surname</MudTd>
            </RowTemplate>
        </MudTable>
        <MudNumericField @oninput="ChangeUserPages" @bind-Value="UserPagesCount" Label="Standard" Variant="Variant.Text" Min="1" Max="@UserMaximumPages" />
        <MudNumericField @oninput="ChangeUserPages" @bind-Value="UserElementsCount" Label="Standard" Variant="Variant.Text" Min="1" Max="20" />
    </MudTabPanel>
    <MudTabPanel Text="Группы">
        <MudText>Content Two</MudText>
    </MudTabPanel>
</MudTabs>


<MudButton @onclick="GetUserCount">CLC</MudButton>
<MudText>@_count</MudText>

@code {
    private string _textFinder;

    private int UserPagesCount = 1;
    private int UserElementsCount= 5;
    private int UserMaximumPages = 1;


    private int _count = 0;
    private int _searchCount = 50;

    private IEnumerable<UserInfo> users = new List<UserInfo>();
    private IEnumerable<GroupInfo> groups = new List<GroupInfo>();

    protected override async void OnInitialized() => ChangeUserPages();

    // Определяет состояние выбора страницы
    private int _selected = 1;

    // Доп методы для работы


    private async void ChangeUserPages()
    {
        StateHasChanged();
        PaginateFilter pg = new PaginateFilter() { Page = UserPagesCount, Count = UserElementsCount };
        var response = await httpClient.PostAsJsonAsync("api/users/byOffset", pg);
        if (response != null)
        {
            var res = await response.Content.ReadFromJsonAsync<List<UserInfo>>();
        }
        double maxFromRequest = (1.0 * await GetUserCount() / UserElementsCount);
        UserMaximumPages = (int)(Math.Ceiling(maxFromRequest));
        StateHasChanged();
    }


    private async Task<int> GetUserCount()
    {
        var response = await httpClient.GetFromJsonAsync<int>("api/users/total");

        return response;
    }
}
